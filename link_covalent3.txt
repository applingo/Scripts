タンパク質と3点で共有結合するリガンドの拘束ｃｉｆファイルの作成方法は？
リガンドがhemeの場合もできますか？


ChatGPT:

思考時間: 15 秒
概要 ― まず押さえておきたいこと
モノマー辞書（ligand.cif）

リガンド単体の結合距離・角度・平面拘束などを定義。

AceDRG（CCP4）や phenix.elbow（Phenix）で自動生成できる。

リンク辞書（link_*.cif）

リガンドとタンパク質残基（またはリガンド同士）を共有結合でつなぐ「LINK」用拘束を定義。

1 か所だけなら ready_set / AceDRG が自動で作れることもあるが、3 点結合のような複雑なケースではリンク辞書を別途書く方が確実。

PDB に書く LINK (または LINKR) 行

LINK atom1 res1 … atom2 res2 … を 3 本分書いておく。

Phenix と Coot はここを読んで、対応するリンク辞書を探す。

1. リガンド単体の CIF を作る
AceDRG（推奨）
bash
コピーする
編集する
acedrg --resname LIG ligand.pdb   # ligand.cif と ligand.pdb が生成される
phenix.elbow（例）
bash
コピーする
編集する
phenix.elbow --do-all --residue=LIG ligand.pdb
生成された LIG.cif を $CIFPATH（Phenix なら $PHENIX/phenix/external/kinemage/monomers/ など）か、
後で refinement 時に restraints=ligand/LIG.cif として渡せる場所に置く。

2. 3 点共有結合用リンク辞書を作る
2-1. JLigand で GUI 作成 (直観的)
Open → Residue で LIG と対象アミノ酸残基を同時に読み込む。

画面上で Add Link を選び、3 本の共有結合（例: LIG-N1 ↔ CYS-SG, LIG-C5 ↔ LYS-NZ, …）をクリック。

Save Link Description で link_lig_3point.cif を保存。

2-2. CIF 手書きテンプレート（例）
CIF
コピーする
編集する
data_link_LIG_CYS_LYS_SER
# 3 bonds: LIG–CYS, LIG–LYS, LIG–SER
_loop
_geom_bond_atom_site_label_1
_geom_bond_atom_site_label_2
_geom_bond_distance
_geom_bond_site_symmetry_1
_geom_bond_site_symmetry_2
 # thio-ether
  CYS SG   LIG C5   1.81  .
 # secondary amine
  LYS NZ   LIG N1   1.47  .
 # ester
  SER OG   LIG C7   1.33  .
#
# 必要なら角度・平面拘束も追加
data_ 行の名前は好きに決めてよい（Phenix は link_*.cif 内を全部探索）。

距離は文献値か AceDRG が計算した平均値を採用。

3. PDB に LINK 行を追加
PDB
コピーする
編集する
LINK         C5  LIG A 999      SG  CYS A 123     1555   1.81
LINK         N1  LIG A 999      NZ  LYS A 200     1555   1.47
LINK         C7  LIG A 999      OG  SER A 150     1555   1.33
列位置は PDB 規格（columns 13-16, 17-20, …）に注意。

LINKR にすると Phenix が 自動でリンク辞書を書き出すこともあるが、複数リンクの場合は独自辞書を添付した方が安定。

4. Phenix / REFMAC での使い方
bash
コピーする
編集する
phenix.refine model_linked.pdb data.mtz \
  restraints=link_lig_3point.cif,ligand/LIG.cif
REFMAC なら LIBIN link_lig_3point.cif LIBOUT out.cif。

Coot で手動修正 → Validate → Update Geometry してから再 refine。

5. Heme（ヘム）を 3 点で共有結合する場合
典型例 ― ヘム c (HEC) + 2 × Cys + His
標準モノマー辞書 HEC.cif が CCP4 / Phenix に同梱。

Thioether リンク辞書 CYS-HEM（2 本）が既に用意されている。

軸 His―Fe の共有結合（または配位結合）は HIS-HEM リンクを追加するだけ。

手順
PDB に LINK

PDB
コピーする
編集する
LINK  SG  CYS A  23     C1  HEC A 501     1555   1.81  # thio-ether 1
LINK  SG  CYS A  24     C4  HEC A 501     1555   1.81  # thio-ether 2
LINK  ND1 HIS A  87     FE  HEC A 501     1555   2.10  # axial His
必要な辞書を確認

CYS-HEM.cif（多くの配布物に入っている）

HIS-HEM_AX.cif（無ければ JLigand で1行だけのリンク辞書を作る）

refine 時に restraints=HEC.cif,CYS-HEM.cif,HIS-HEM_AX.cif を渡す。

✅ 結論 ― 既存の heme 辞書＋補助リンク辞書を組み合わせれば、ヘムでも 3 点共有結合は問題なく取り扱えます。

6. トラブルシューティングのヒント
症状	代表的な原因	対策
refine 中に “unknown link” エラー	PDB の LINK 行と CIF 内の atom 名 / res 名が不一致	PDB・CIF 双方で ATOM 名（列の桁位置も！）と resname を合わせる
うまく距離拘束がかからない	link 辞書に _chem_comp_bond.type が無い	sing（共有結合）か covale を明示
結合長が極端に短い / 長い	錯体の価数や配位数が違う	鉄中心の場合は REDUCE や phenix.metal_coordinates で酸素・水分子の配位数をチェック

まとめ
リガンド単体のモノマー辞書を AceDRG/ELBOW で作る。

3 本の共有結合を記述した リンク辞書を JLigand などで作成。

PDB に対応する LINK 行を 3 本書く。

refine で 両方の CIF を読み込ませれば完成。

heme なら標準辞書＋既存の CYS-HEM, HIS-HEM リンクでほぼ完結。

これで、タンパク質と 3 点共有結合を持つリガンド（heme を含む）を安定して精密化・可視化できます。








あなた:
data_link_LIG_CYS_LYS_SER
# 3 bonds: LIG–CYS, LIG–LYS, LIG–SER
_loop
_geom_bond_atom_site_label_1
_geom_bond_atom_site_label_2
_geom_bond_distance
_geom_bond_site_symmetry_1
_geom_bond_site_symmetry_2
 # thio-ether
  CYS SG   LIG C5   1.81  .
 # secondary amine
  LYS NZ   LIG N1   1.47  .
 # ester
  SER OG   LIG C7   1.33  .
#
# 必要なら角度・平面拘束も追加

これってLYS NZとなっているけどどのchainの何番目の残基とか入れなくて良いのですか？


ChatGPT:

思考時間: 6 秒
いいえ、リンク辞書（link_*.cif）の中では “どのチェーンの何番目” という個別情報は一切書きません。

なぜ番号を書かないのか？
役割	どこに書く？	何を書く？	いつ決まる？
汎用的な結合の定義
（「LIG-CYS の SG–C5 は 1.81 Å」など）	リンク辞書 (link_*.cif)	残基名 と 原子名 だけ	永続的（どの構造でも共通）
今回のモデルで “どの” CYS と LIG を結ぶか	モデル PDB/mmCIF 本体
・PDBなら LINK 行
・mmCIFなら _struct_conn ループ	チェーン ID, 残基番号, 挿入コードなど	そのモデル固有

リンク辞書は “テンプレート” として 単に「化学的にこういうリンクが成立する」ことを記述するファイルです。
リファイン時に Phenix や REFMAC は次のように動きます。

モデルファイル（PDB の LINK 行または mmCIF の _struct_conn）を読み、

chain A, resseq 123, CYS, atom SG ↔ chain A, resseq 999, LIG, atom C5
…と “実体” を特定。

そのリンクが使っている 残基ペア (CYS–LIG) と 原子ペア (SG–C5) を手掛かりに、
リンク辞書の中に一致する行（先ほどの _geom_bond_atom_site_label_* など）を探す。

見つかったら、その距離・角度拘束を 該当ペアに適用する。

🔑 ポイント

リンク辞書には「どの残基名の、どの原子同士が何 Å で結合するか」だけを書く。

チェーン ID / 残基番号は モデル側（PDB の LINK 行）にだけ登場する。
リンク辞書は “どの構造でも再利用できる” 汎用ファイルにするためです。

PDB と CIF の対応イメージ
1. モデル (PDB) — 個体情報
PDB
コピーする
編集する
LINK         SG  CYS A  123      C5  LIG A  999     1555   1.81
A 123 の CYS-SG と A 999 の LIG-C5 を 1.81 Å で結ぶ、と宣言。

2. リンク辞書 (link_LIG_CYS.cif) — 汎用情報
CIF
コピーする
編集する
data_link_LIG_CYS
_loop
_geom_bond_atom_site_label_1
_geom_bond_atom_site_label_2
_geom_bond_distance
  CYS SG   LIG C5   1.81
#
CYS-SG と LIG-C5 の結合長は 1.81 Å、という 化学的ルールだけを記述。

チェーンも番号も書かないので、別の構造でも同じファイルを使い回せる。

もし LINK 行を書かずに自動判定させたい場合
Phenix では LINKR にすると、距離が一定以内なら自動でリンク辞書を作ってくれますが、

3 点以上の複雑リンクでは誤検出・過剰拘束のリスクがある。

研究成果として提出する際も “明示的な辞書を添付” した方が安全。

したがって、複数点結合では必ず PDB に LINK 行を書き、対応する独自リンク辞書を添付するのがベストプラクティスです。

まとめ
リンク辞書には チェーン ID や残基番号は不要。残基名・原子名だけを書きます。

どの残基同士を結ぶかは モデル側の LINK/struct_conn が担当。

こうすることで同じリンク辞書を他の構造や別チェーンでも再利用できます。








あなた:
https://files.rcsb.org/view/5FIW.cif

このcifファイルのHEMEとタンパク質の共有結合と同じものです。ただしタンパク質がわはマウスのものでちょっと違いますが、共有結合サイトは同じです。
このcifファイルと同じような拘束をかけたいと思っています。どのようにして準備したら良いでしょうか？


ChatGPT:

思考時間: 1m 26s
ゴール
5FIW の HEME–タンパク質 3 点共有結合とまったく同じ化学拘束を
マウス由来の同型タンパク質モデルでも使えるようにする。

既存 mmCIF から必要な情報だけ抽出→自分のモデルに移植するのが最短ルート。

① 5FIW から“リンク情報”だけ取り出す
手順	コマンド例	目的
1	wget https://files.rcsb.org/view/5FIW.cif	元 mmCIF を取得
2	grep -n "_struct_conn." -A100 5FIW.cif > 5FIW_links.cif	共有結合を記述する _struct_conn ループを抜き出す
3	（任意）grep -n "_struct_conn_angle" -A100 5FIW.cif >> 5FIW_links.cif	角度･平面拘束もある場合は追記

_struct_conn に conn_type “covale” が付いている 3 本が HEME の共有結合
（MPO 型 peroxidase では HEM–CYS-SG, HEM–MET-SD, HEM–GLU-OE1 の 3 本）。
ebi.ac.uk

② 抜き出したリンクを 辞書化 する（Phenix ReadySet が簡単）
bash
コピーする
編集する
phenix.ready_set 5FIW.cif write_geo_file=False  \
                 extract_only=True              \
                 link_cif_out=heme_links.cif    \
                 keep_identical_atom_names=True
ポイント

extract_only=True で 未知リガンド生成はスキップし、リンク辞書だけを出力。

出力 heme_links.cif には各共有結合の

_chem_comp_bond … 結合距離

_chem_comp_angle … 必要なら角度
がすでに書かれているので、そのまま再利用できる。

③ 自分のモデル（マウス配列）に LINK 行 / struct_conn を書く
PDB 形式の場合
PDB
コピーする
編集する
LINK         SG  CYS A 145      C1  HEM X   1     1555   1.81
LINK         SD  MET A 243      C5  HEM X   1     1555   1.80
LINK        OE1  GLU A 242      C8  HEM X   1     1555   1.31
mmCIF 形式の場合（推奨）
コピーした _struct_conn ループの チェーン ID / 残基番号 だけを
自分のモデルに合わせて書き換える（化学情報はそのまま）。

CIF
コピーする
編集する
loop_
_struct_conn.id
_struct_conn.conn_type_id
_struct_conn.ptnr1_label_asym_id
_struct_conn.ptnr1_label_seq_id
_struct_conn.ptnr1_symmetry
_struct_conn.ptnr1_label_atom_id
_struct_conn.ptnr2_label_asym_id
_struct_conn.ptnr2_label_seq_id
_struct_conn.ptnr2_symmetry
_struct_conn.ptnr2_label_atom_id
_struct_conn.pdbx_dist_value
1 covale  A 145  . SG  X 1 .  C1 1.81
2 covale  A 243  . SD  X 1 .  C5 1.80
3 covale  A 242  . OE1 X 1 .  C8 1.31
化学拘束はチェーン・番号に依存しないので、書き換えるのは
label_asym_id と label_seq_id だけで OK。

④ 精密化時に 辞書を一緒に渡す
bash
コピーする
編集する
phenix.refine  my_mouse_model_with_links.cif  data.mtz  \
               restraints=heme_links.cif,HEM.cif
HEM.cif は標準モノマー辞書（$PHENIX/…/monomers/HEM.cif）で十分。

REFMAC の場合は LIBIN heme_links.cif LIBOUT out.cif を追加。

⑤ チェックポイント
チェック	コマンド	合格ライン
リンクが認識されたか	grep "Covalent link" refine.log	3 本とも “applied”
幾何の RMSZ	phenix.geometry_minimization … → log	< 1.5 推奨
マップで結合密度が切れていないか	Coot / PyMOL	連続している

⑥ 別の作り方（GUI 派 or CCP4 派）
方法	ツール	大まかな流れ	参考
AceDRG でリンク辞書を新規生成	acedrg -L "CYS.SG-HEM.C1, …"	1 行で複数リンク指定可	
pmc.ncbi.nlm.nih.gov
JLigand GUI	5FIW を読み込み → “Add link” で 3 本クリック → Save Link Description	直感的	CCP4 Tutorials
mmCIF ベタ貼り	5FIW の _struct_conn と _struct_conn_angle をそのままコピー	まさにテンプレート利用	–

まとめ
5FIW.cif から _struct_conn ループを抜く。

ReadySet でリンク辞書 (heme_links.cif) を自動生成。

自分のモデルに LINK（または struct_conn） を書き換えて挿入。

HEM.cif + heme_links.cif を渡して refine。

これで、5FIW と同一の 3 点共有結合拘束がマウスタンパク質にも完全に適用できます。











情報源
あなた:
heme_links.cifには結合の角度情報とかも入りますか


ChatGPT:

思考時間: 7 秒
結論から先に
はい、多くの場合 heme_links.cif には

結合距離 (_chem_comp_bond)

結合角 (_chem_comp_angle)
が自動で書き込まれます。

ただし 必ずしも全リンクで角度が出力されるわけではない ので、

ファイルを開いて _chem_comp_angle ループがあるか確認

無ければ JLigand や AceDRG で角度拘束を追加
というチェックが推奨です。

ReadySet が出力するリンク辞書の中身
ループ	例に出てくる項目	役割
_chem_comp_bond	CYS SG HEM C1 1.81 SING	結合距離とタイプ（SING／COVAL）
_chem_comp_angle	SG C1 C2 103.5	3 原子の結合角
_chem_comp_tor (稀)	SG C1 C2 C3 –35.0 SIGMA 20	4 原子の二面角
_chem_comp_plane_atom (平面拘束)	FE C1 C2 …	ポルフィリン環などを平面に保つ

ReadySet は 距離は必ず、角度・平面は 必要と判断すれば 自動生成します。

HEME-CYS thio-ether のように化学的自由度が少ない場合、
距離のみで充分とみなされ角度が省略されることもあります。

角度拘束が無い場合の追加方法
JLigand

5FIW を開く → “Add link” で 3 点共有結合を指定 →
メニュー Link → Export restraints

角度／平面も自動で付いた辞書を得られる。

AceDRG

bash
コピーする
編集する
acedrg -L "CYS.SG-HEM.C1, MET.SD-HEM.C5, GLU.OE1-HEM.C8" \
       --link_file heme_links.cif
-L に 3 本まとめて指定すると、距離・角度・（必要なら）平面まで付く。

手書きで追記

CIF
コピーする
編集する
loop_
_chem_comp_angle.atom_site_label_1
_chem_comp_angle.atom_site_label_2
_chem_comp_angle.atom_site_label_3
_chem_comp_angle.value
  SG  C1  C2   103.5
#
原子順序は 中心原子が 2 列目。

角度値は 5FIW からコピペするか、文献値を採用。

どうやって確認する？
bash
コピーする
編集する
grep -n "_chem_comp_angle" -A5 heme_links.cif
出力が空なら、角度拘束は無い → 追加を検討。

行があれば ReadySet で自動生成されているので、そのまま使用可。

まとめ
距離拘束は確実に入る。

角度・平面拘束は自動生成されることが多いが、必ずとは限らないので要確認。

無ければ JLigand／AceDRG／手書きで _chem_comp_angle（必要なら _chem_comp_plane_atom）を追記しておけば、Phenix・REFMAC で完全に同じ幾何拘束を再現できます。








あなた:
既存のPDBファイルから以下で抜いているので距離とともに角度の拘束も入ると思うので認識は合っていますか
phenix.ready_set 5FIW.cif write_geo_file=False  \
                 extract_only=True              \
                 link_cif_out=heme_links.cif    \
                 keep_identical_atom_names=True


ChatGPT:

思考時間: 23 秒
はい、その phenix.ready_set コマンドで生成される heme_links.cif には 基本的に次の 3 種類の幾何拘束が書き込まれます。

ループ名	何を制限するか	ReadySet の挙動
_chem_comp_bond	結合距離 (bond length)	必ず出力されます
_chem_comp_angle	結合角 (bond angle)	該当する3原子がリンクを跨いでいれば自動生成されます
_chem_comp_plane_atom など	平面拘束・二面角	ポルフィリン環など平面性が重要と判定された場合に付与

PHENIX の FAQ でも「ReadySet はカスタム結合距離と（必要に応じて）結合角拘束を出力する」と説明されています。
mrc-lmb.cam.ac.uk

ただし ― 角度が必ず 100 % 入るとは限らない
リンク両端以外の原子も含めた 3 原子が一意に決まらない場合
（例：橋渡し原子が環構造内にあり、どの角を固定すべきか判定しづらいとき）
ReadySet は 距離拘束のみで済ませることがあります。

既存の標準モノマー辞書にその角度がすでに定義されている場合は、
重複を避けて出力しません。

角度が入ったかどうかを確認するワンライナー
bash
コピーする
編集する
grep -n "_chem_comp_angle" -A3 heme_links.cif
ヒットがあれば _chem_comp_angle ループが生成されています。

出力が空なら角度拘束は付いていません。必要と感じたら

JLigand でリンクを再作成して角度を追加

AceDRG を -L オプション付きで実行して角度を含むリンク辞書を再生成
といった方法で補えます。

オプションの意味（念のため）
オプション	意味
write_geo_file=False	モデル全体の .geo ファイル（詳細幾何レポート）を省略
extract_only=True	既存モデルに含まれるリンク情報だけを抽出し、新規リガンド生成を行わない
link_cif_out=heme_links.cif	抽出結果をこのファイル名で出力
keep_identical_atom_names=True	元構造と同じ原子名を維持して辞書を作成

まとめ
距離拘束は必ず、角度拘束は自動判定で付与されるのが ReadySet の標準動作。

本当に入ったかは grep "_chem_comp_angle" で確認するのが確実です。

角度が無ければ JLigand や AceDRG で簡単に追加できます。










情報源
あなた:
AceDRGのインストールの仕方を教えて下さい。簡単な使い方も紹介して下さい


ChatGPT:

思考時間: 51 秒
1. どこから入手するか
ケース	最速で確実	長所	短所
A. CCP 4 フルスイートを入れる（推奨）	CCP4-9.0 (Ilkley) の公式インストーラに AceDRG が同梱	安定版・GUI（Coot, JLigand）, REFMAC5 も一式付属	約 6 GB と大きい
B. Conda で最小構成を作る	ccp4-base + acedrg パッケージ（Linux/macOS）を conda-forge/CCP4 チャンネルから入手	既存 Conda 環境に載せやすい	パッケージ更新が少し遅れる事がある
C. GitLab からソースビルド	https://ccp4forge.rc-harwell.ac.uk/ccp4/acedrg	自分で最新開発版を追える	依存関係（CCP4 libs, COD DB など）を手動解決する必要

1-A CCP4 9.0 インストーラ（Linux/Mac）
bash
コピーする
編集する
# Linux 例
wget https://downloads.ccp4.ac.uk/9/latest/CCP4-9.0-Linux-x86_64.sh
chmod +x CCP4-9.0-Linux-x86_64.sh
./CCP4-9.0-Linux-x86_64.sh --prefix $HOME/ccp4-9.0
source $HOME/ccp4-9.0/bin/ccp4.setup-sh  # ← PATH, CCP4 環境変数を設定
macOS はダウンロードした .pkg をダブルクリックするだけです。Installer が環境設定用の ccp4.setup-sh を /Applications/ccp4-9.0/ 内に置くので、ターミナルの ~/.zshrc 等で source しておくと恒久化できます。
ccp4.ac.uk
ccp4.ac.uk

1-B Conda（サイズ重視で GUI 不要なら）
bash
コピーする
編集する
conda config --add channels conda-forge
conda config --add channels ccp4   # CCP4 の公式 Conda リポ
conda create -n ccp4_tools python=3.10 ccp4-base acedrg coot gemmi
conda activate ccp4_tools
ccp4-base に REFMAC5 などの CLI、acedrg に AceDRG 本体が入ります。パッケージ名は OS・時期で変動しますので conda search acedrg --channel ccp4 で確認してください。
anaconda.org

1-C ソースから
bash
コピーする
編集する
git clone https://ccp4forge.rc-harwell.ac.uk/ccp4/acedrg.git
cd acedrg
make && make install PREFIX=$HOME/ccp4-custom
export PATH=$HOME/ccp4-custom/bin:$PATH
依存ライブラリ（ccp4-libs, clipper, sqlite3 など）を入れておく必要があります。開発版を試したい人向け。
ccp4forge.rc-harwell.ac.uk

2. 動作確認
bash
コピーする
編集する
which acedrg        # フルパスが返って来れば OK
acedrg -h | head    # ヘルプが表示されるか確認
acedrg -v でバージョン、acedrg -h で使い方の要約が出ます。
www2.mrc-lmb.cam.ac.uk

3. 代表的な使い方チートシート
目的	最小コマンド例	出力ファイル	備考
(i) 単純なリガンド辞書	acedrg -i ligand.smi -o LIG -r LIG	LIG.cif, LIG.pdb	SMILES → CIF+PDB
(ii) PDB を入力に	acedrg --mmcif ligand.pdb -o LIG -r LIG	同上	原子名を保持したまま辞書化
(iii) 共有結合リンク辞書	acedrg -L link.txt -o link3	link3.cif	link.txt に結合指示を列挙
(iv) HEME とタンパク質を結ぶ 3 本リンク	acedrg -L "CYS.SG-HEM.C1,MET.SD-HEM.C5,GLU.OE1-HEM.C8" -r HEM -o heme_link	heme_link.cif	コマンド 1 行で複数リンク生成

link.txt の例
vbnet
コピーする
編集する
# atom1  res1.atom  atom2  res2.atom  bond_order
CYS.SG  HEM.C1  single
MET.SD  HEM.C5  single
GLU.OE1 HEM.C8  single
AceDRG はここから 結合距離 + 結合角 + (必要なら) 平面拘束 を自動で推定し、*.cif に書き込みます。
www2.mrc-lmb.cam.ac.uk

4. Phenix／REFMAC で使うとき
bash
コピーする
編集する
phenix.refine model.pdb data.mtz \
    restraints=heme_link.cif,HEM.cif
# または
refmac5 XYZIN model.pdb HKLIN data.mtz \
       LIBIN heme_link.cif XYZOUT out.pdb HKLOUT out.mtz
HEM.cif は CCP4 モノマーライブラリに同梱。

heme_link.cif が AceDRG で作ったリンク辞書。

refine ログに “Covalent link applied” が 3 本出ていれば成功です。

5. トラブルシューティング TIPS
症状	原因	解決
acedrg: command not found	PATH 未設定	source $CCP4/bin/ccp4.setup-sh をシェル RC に追加
リンク辞書に角度が無い	AceDRG が不要と判断した	acedrg -L ... --forceAngles（近日のバージョンで追加）か JLigand で追加手修正
“aromatic” という bond order で失敗	AceDRG は link モードで single/double/triple を要求	対象モノマーを一度 AceDRG で再辞書化し、明示的な single に変換

まとめ
インストールは CCP4 スイート同梱が最も手軽。

AceDRG の基本は

bash
コピーする
編集する
acedrg -i <SMILES> -o <prefix> -r <3文字コード>
だけ。PDB や MOL2 入力も同様。

リンク辞書は -L "resA.atomA-resB.atomB,... " で一発作成。

出力 CIF には 距離 + 角度 + 平面拘束 が（必要なら）自動で入るので、Phenix/REFMAC にそのまま渡せば OK です。












情報源

